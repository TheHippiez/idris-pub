import colander
from cornice import Service

from caleido.security import authenticator_factory
from caleido.utils import OKStatus
from caleido.resources import TypeResource

class ClientSchema(colander.MappingSchema):
    status = OKStatus
    @colander.instantiate(missing=colander.drop)
    class dev_user(colander.MappingSchema):
        user = colander.SchemaNode(colander.String())
        token = colander.SchemaNode(colander.String())

    @colander.instantiate()
    class types(colander.SequenceSchema):
        @colander.instantiate()
        class type(colander.MappingSchema):
            id = colander.SchemaNode(colander.String())
            label = colander.SchemaNode(colander.String())
            @colander.instantiate()
            class fields(colander.SequenceSchema):
                @colander.instantiate()
                class field(colander.MappingSchema):
                    id = colander.SchemaNode(colander.String())
                    label = colander.SchemaNode(colander.String())
                    type = colander.SchemaNode(colander.String())
            @colander.instantiate()
            class filters(colander.SequenceSchema):
                @colander.instantiate()
                class filter(colander.MappingSchema):
                    label = colander.SchemaNode(colander.String())
                    id = colander.SchemaNode(colander.String())
                    @colander.instantiate()
                    class values(colander.SequenceSchema):
                        @colander.instantiate()
                        class value(colander.MappingSchema):
                            id = colander.SchemaNode(colander.String())
                            label = colander.SchemaNode(colander.String())

            @colander.instantiate()
            class types(colander.SequenceSchema):
                @colander.instantiate()
                class type(colander.MappingSchema):
                    id = colander.SchemaNode(colander.String())
                    label = colander.SchemaNode(colander.String())

class ClientResponseSchema(colander.MappingSchema):
    body = ClientSchema()



client = Service(name='Client',
                 path='/api/v1/client',
                 tags=['config'],
                 cors_origins=('*', ),
                 response_schemas={
    '200': ClientResponseSchema(description='Ok')})

@client.get()
def client_config(request):
    group_types = [
        {'id': v['key'], 'label': v['label']}
        for v in TypeResource(request.dbsession, 'group').to_dict()['values']]
    work_types = [
        {'id': v['key'], 'label': v['label']}
        for v in TypeResource(request.dbsession, 'work').to_dict()['values']]
    group_account_types = [
        {'id': v['key'], 'label': v['label']}
        for v in TypeResource(request.dbsession, 'groupAccount').to_dict()['values']]
    person_account_types = [
        {'id': v['key'], 'label': v['label']}
        for v in TypeResource(request.dbsession, 'personAccount').to_dict()['values']]
    user_group_types = [
        {'id': 100, 'label': 'Admin'},
        {'id': 80, 'label': 'Manager'},
        {'id': 60, 'label': 'Editor'},
        {'id': 40, 'label': 'Owner'},
        {'id': 10, 'label': 'Viewer'}]

    # palette generated by http://mcg.mbitson.com
    result = {
        'status': 'ok',
        'repository': {'title': 'EUR Affiliation Browser',
                       'theme': {'primary': {'50': '#e2f0ed',
                                             '100': '#b6d9d1',
                                             '200': '#86c0b3',
                                             '300': '#55a694',
                                             '400': '#30937d',
                                             '500': '#0c8066',
                                             '600': '#0a785e',
                                             '700': '#086d53',
                                             '800': '#066349',
                                             '900': '#035038',
                                             'A100': '#83ffd0',
                                             'A200': '#50ffbd',
                                             'A400': '#1dffaa',
                                             'A700': '#03ffa1',
                                             'contrastDefaultColor': 'light',
                                            },
                                 'accent': {'50': '#e0f7ed',
                                            '100': '#b3ead2',
                                            '200': '#80dcb4',
                                            '300': '#4dce96',
                                            '400': '#26c480',
                                            '500': '#00b969',
                                            '600': '#00b261',
                                            '700': '#00aa56',
                                            '800': '#00a24c',
                                            '900': '#00933b',
                                            'A100': '#beffd3',
                                            'A200': '#8bffb0',
                                            'A400': '#58ff8e',
                                            'A700': '#3fff7d',
                                            'contrastDefaultColor': 'light',
                                            }
                                 }
                       },
        'settings': {'person': {'account_types': person_account_types},
                     'group': {'account_types': group_account_types,
                               'type': group_types},
                     'work': {'type': work_types},
                     'user': {'type': user_group_types},
                     },

        'types': [{'id': 'person',
                   'types': []},
                  {'id': 'group',
                   'types': group_types,
                   'account_types': group_account_types},
                  {'id': 'user',
                   'types': []}
                  ]
        }
    dev_user_id = request.registry.settings.get('caleido.debug_dev_user')
    if dev_user_id:
        auth_context = authenticator_factory(request)
        principals = auth_context.principals(dev_user_id)
        token = request.create_jwt_token(dev_user_id, principals=principals)
        result['dev_user'] = {'user': dev_user_id, 'token': token}
    return result
